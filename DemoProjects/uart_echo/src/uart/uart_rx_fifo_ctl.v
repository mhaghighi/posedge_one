// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uart_rx_fifo_ctl,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc3s400pq208-4,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.599000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=7}" *)

module uart_rx_fifo_ctl (
        ap_clk,
        ap_rst_n,
        valid_V,
        rx_data_data_V,
        rx_data_rdy_V,
        outData_V_data_V_din,
        outData_V_data_V_full_n,
        outData_V_data_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [0:0] valid_V;
input  [7:0] rx_data_data_V;
input  [0:0] rx_data_rdy_V;
output  [7:0] outData_V_data_V_din;
input   outData_V_data_V_full_n;
output   outData_V_data_V_write;

reg outData_V_data_V_write;
reg    ap_rst_n_inv;
reg   [1:0] State = 2'b00;
wire   [0:0] tmp_nbwritereq_fu_62_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
wire   [1:0] State_load_load_fu_79_p1;
wire   [0:0] brmerge_demorgan_fu_95_p2;
reg    ap_sig_bdd_42;
wire   [0:0] rx_data_rdy_V_read_read_fu_44_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_55;
reg    ap_sig_bdd_41;
reg    ap_sig_bdd_45;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_45) begin
        if (ap_sig_bdd_41) begin
            State <= ap_const_lv2_1;
        end else if (ap_sig_bdd_55) begin
            State <= ap_const_lv2_2;
        end else if ((State_load_load_fu_79_p1 == ap_const_lv2_2)) begin
            State <= ap_const_lv2_0;
        end
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_27)
begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// outData_V_data_V_write assign process. ///
always @ (State or tmp_nbwritereq_fu_62_p3 or ap_sig_cseq_ST_st1_fsm_0 or brmerge_demorgan_fu_95_p2 or ap_sig_bdd_42)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv2_0 == State) & ~(brmerge_demorgan_fu_95_p2 == ap_const_lv1_0) & ~(tmp_nbwritereq_fu_62_p3 == ap_const_lv1_0) & ~ap_sig_bdd_42)) begin
        outData_V_data_V_write = ap_const_logic_1;
    end else begin
        outData_V_data_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_42)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign State_load_load_fu_79_p1 = State;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_27 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_41 assign process. ///
always @ (State or tmp_nbwritereq_fu_62_p3 or brmerge_demorgan_fu_95_p2)
begin
    ap_sig_bdd_41 = ((ap_const_lv2_0 == State) & ~(brmerge_demorgan_fu_95_p2 == ap_const_lv1_0) & ~(tmp_nbwritereq_fu_62_p3 == ap_const_lv1_0));
end

/// ap_sig_bdd_42 assign process. ///
always @ (outData_V_data_V_full_n or State or tmp_nbwritereq_fu_62_p3 or brmerge_demorgan_fu_95_p2)
begin
    ap_sig_bdd_42 = ((outData_V_data_V_full_n == ap_const_logic_0) & (ap_const_lv2_0 == State) & ~(brmerge_demorgan_fu_95_p2 == ap_const_lv1_0) & ~(tmp_nbwritereq_fu_62_p3 == ap_const_lv1_0));
end

/// ap_sig_bdd_45 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_42)
begin
    ap_sig_bdd_45 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_42);
end

/// ap_sig_bdd_55 assign process. ///
always @ (State_load_load_fu_79_p1 or rx_data_rdy_V_read_read_fu_44_p2)
begin
    ap_sig_bdd_55 = ((State_load_load_fu_79_p1 == ap_const_lv2_1) & (ap_const_lv1_0 == rx_data_rdy_V_read_read_fu_44_p2));
end
assign brmerge_demorgan_fu_95_p2 = (valid_V & rx_data_rdy_V);
assign outData_V_data_V_din = rx_data_data_V;
assign rx_data_rdy_V_read_read_fu_44_p2 = rx_data_rdy_V;
assign tmp_nbwritereq_fu_62_p3 = outData_V_data_V_full_n;


endmodule //uart_rx_fifo_ctl

